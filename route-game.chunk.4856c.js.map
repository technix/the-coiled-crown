{"version":3,"sources":["webpack:///./components/screens/choices/index.css","webpack:///./components/screens/choices/index.js","webpack:///./components/screens/scenes/paragraph.js","webpack:///./components/screens/scenes/scene.js","webpack:///./components/screens/scenes/index.css","webpack:///./components/screens/inventory/index.css","webpack:///./components/screens/inventory/index.js","webpack:///./components/routes/game.js","webpack:///./components/screens/scenes/index.js"],"names":["Choices","_ref","currentScene","handleClick","isReady","choices","key","concat","uuid","h","class","style","block_choices","join","opacity","Block","map","choice","index","ChoiceButton","Paragraph","pStyle","content","isCurrent","dangerouslySetInnerHTML","__html","Scene","scene","readyHandler","_useState2","_slicedToArray","useState","isLoaded","setIsLoaded","atrament","useContext","Atrament","elementRef","useRef","getImagesList","useCallback","images","forEach","item","tags","IMAGE","push","game","getAssetPath","useEffect","setTimeout","current","scrollIntoView","behavior","block","_ref2","preloadImages","apply","arguments","preloader","ref","i","Fragment","ContainerImage","src","text","InventoryIcon","xmlns","viewBox","transform","d","fill","Inventory","isOpen","setOpenInventory","_useState4","inventoryText","setInventoryText","toggleInventory","escHandler","e","document","addEventListener","removeEventListener","Backdrop","onClick","Modal","CloseButton","ContainerText","result","ink","evaluateFunction","output","title","GameRoute","gamestate","useStore","store","resume","continueStory","init","Container","Settings","fontSize","settings","Scenes","scenes","AllChoices","makeChoice","id","length","LinkHome","BlockScenes","setReady","lastSceneIndex","block_scene","s"],"mappings":"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","file":"route-game.chunk.4856c.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"block_choices\":\"block_choices__5vDxh\"};","import { h } from 'preact';\nimport style from './index.css';\nimport { Block, ChoiceButton } from 'src/components/ui';\n\nconst Choices = ({ currentScene, handleClick, isReady }) => {\n  if (!currentScene || !currentScene.choices) {\n    return;\n  }\n  const key = `choices-${currentScene.uuid}`;\n  return (\n    <div key={key} class={[style.block_choices, 'atrament-block-choices', isReady ? 'animation_appear' : ''].join(' ')}>\n      <div style={{ opacity: isReady ? 1 : 0 }}>\n        <Block>\n          {currentScene.choices.map((choice, index) => (\n            <ChoiceButton\n              key={`${key}-${index}`}\n              choice={choice}\n              handleClick={handleClick}\n            />)\n          )}\n        </Block>\n      </div>\n    </div>\n  )\n};\n\nexport default Choices;\n","import { h } from 'preact';\n\nconst Paragraph = ( {content, isCurrent} ) => {\n  let pStyle;\n  if (!isCurrent) {\n    pStyle = {opacity: '70%'};\n  }\n  if (content === \"\\n\") {\n    return '';\n  }\n  return (<p style={pStyle} dangerouslySetInnerHTML={{__html: content}} />);\n}\n\nexport default Paragraph;\n","import { h, Fragment } from 'preact';\nimport style from './index.css';\nimport { useRef, useState, useEffect, useContext, useCallback } from 'preact/hooks';\nimport { ContainerImage } from 'src/components/ui';\nimport Paragraph from './paragraph';\nimport preloadImages from 'src/utils/preload-images';\nimport Atrament from 'src/atrament-context';\n\nconst Scene = ({ scene, isCurrent, readyHandler }) => {\n  const [ isLoaded, setIsLoaded ] = useState(false);\n  const atrament = useContext(Atrament);\n  const elementRef = useRef(null);\n\n  const getImagesList = useCallback(() => {\n    const images = [];\n    scene.content.forEach(item => {\n      if (item.tags.IMAGE) {\n        images.push(atrament.game.getAssetPath(item.tags.IMAGE));\n      }\n    });\n    return images;\n  }, [ atrament.game, scene.content ]);\n\n  useEffect(() => {\n    if (isLoaded && isCurrent) {\n      readyHandler(true);\n      setTimeout(\n        () => elementRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' }),\n        100\n      );\n    }\n  }, [isLoaded, isCurrent, elementRef, readyHandler]);\n\n  // preload all images for scene\n  useEffect(() => {\n    const preloader = async () => {\n      await preloadImages(getImagesList());\n      setIsLoaded(true);\n    }\n    preloader();\n  }, [ getImagesList, setIsLoaded ]);\n\n  return (\n    <div class={[style.block, 'atrament-block-text', isCurrent && isLoaded ? 'animation_appear' : ''].join(' ')} ref={elementRef}>\n      <div style={{ opacity: isLoaded ? 1 : 0 }}>\n        {\n          scene.content.map((item, i) => (\n            <Fragment key={`paragraph-${scene.uuid}-${i}`}>\n              {item.tags.IMAGE ? <ContainerImage src={atrament.game.getAssetPath(item.tags.IMAGE)} /> : ''}\n              <Paragraph isCurrent={isCurrent} content={item.text} />\n            </Fragment>\n          ))\n        }\n      </div>\n    </div>\n  )\n};\n\nexport default Scene;\n\n","// extracted by mini-css-extract-plugin\nexport default {\"block_scene\":\"block_scene__IjQGg\",\"block\":\"block__NwK6o\"};","// extracted by mini-css-extract-plugin\nexport default {\"inventory_container\":\"inventory_container__LavW1\",\"inventory_toggle\":\"inventory_toggle__wvlFq\"};","import { h } from 'preact';\nimport style from './index.css';\nimport { useCallback, useContext, useEffect, useState } from 'preact/hooks';\n\nimport {\n  Backdrop,\n  Modal,\n  CloseButton,\n  ContainerText\n} from 'src/components/ui';\n\nimport Atrament from 'src/atrament-context';\n\nconst InventoryIcon = () => (<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><g class=\"\" transform=\"translate(0,0)\" style=\"\"><path d=\"M250.882 22.802c-23.366 3.035-44.553 30.444-44.553 65.935 0 19.558 6.771 36.856 16.695 48.815l11.84 14.263-18.217 3.424c-12.9 2.425-22.358 9.24-30.443 20.336-8.085 11.097-14.266 26.558-18.598 44.375-7.843 32.28-9.568 71.693-9.842 106.436h42.868l11.771 157.836c29.894 6.748 61.811 6.51 90.602.025l10.414-157.86h40.816c-.027-35.169-.477-75.126-7.584-107.65-3.918-17.934-9.858-33.372-18.04-44.343-8.185-10.97-18.08-17.745-32.563-19.989l-18.592-2.88 11.736-14.704c9.495-11.897 15.932-28.997 15.932-48.082 0-37.838-23.655-65.844-49.399-65.844z\" fill=\"var(--fg-color)\" fill-opacity=\"1\" /></g></svg>);\n\nconst Inventory = () => {\n  const atrament = useContext(Atrament);\n\n  const [ isOpen, setOpenInventory ] = useState(false);\n  const [ inventoryText, setInventoryText ] = useState('');\n  const toggleInventory = useCallback(() => setOpenInventory(!isOpen), [ isOpen ]);\n\n  const openInventory = () => {\n    const result = atrament.ink.evaluateFunction('player_inventory', [], true);\n    setInventoryText(result.output);\n    toggleInventory();\n  };\n\n  const escHandler = useCallback((e) => {\n    if (e.key === \"Escape\") {\n      setOpenInventory(false)\n    }\n  }, []);\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", escHandler, false);\n    return () => {\n      document.removeEventListener(\"keydown\", escHandler, false);\n    }\n  }, [ escHandler ]);\n\n  if (isOpen) {\n    return (\n      <div class={style.inventory_container}>\n        <Backdrop onClick={toggleInventory} />\n        <Modal>\n          <CloseButton onClick={toggleInventory} />\n          <ContainerText>\n            <p dangerouslySetInnerHTML={{__html: inventoryText}} />\n          </ContainerText>\n        </Modal>\n      </div>\n    );\n  }\n  return (\n    <button class={style.inventory_toggle} onClick={openInventory} title=\"Inventory\">\n      <InventoryIcon />\n    </button>\n  );\n};\n\nexport default Inventory;","import { h } from 'preact';\nimport { useStore } from '@nanostores/preact';\nimport Atrament from 'src/atrament-context';\n\nimport { useContext, useEffect } from 'preact/hooks';\nimport { Container, ContainerText } from 'src/components/ui';\n\nimport Scenes from 'src/components/screens/scenes';\nimport Settings from 'src/components/screens/settings';\nimport Inventory from 'src/components/screens/inventory';\n\nconst GameRoute = () => {\n  const atrament = useContext(Atrament);\n  const gamestate = useStore(atrament.store());\n\n  useEffect(() => {\n    const init = async () => {\n      await atrament.game.resume();\n      atrament.game.continueStory();\n    }\n    init();\n  }, [ atrament.game ]);\n\n  return (\n    <Container>\n      <Settings />\n      <Inventory />\n      <ContainerText fontSize={gamestate.settings.fontSize}>\n        <Scenes scenes={gamestate.scenes} />\n      </ContainerText>\n    </Container>\n  );\n};\n\nexport default GameRoute;","import { h } from 'preact';\nimport style from './index.css';\nimport Scene from './scene';\nimport { useState, useContext, useCallback } from 'preact/hooks';\nimport Choices from 'src/components/screens/choices';\nimport LinkHome from 'src/components/ui/link-home';\nimport Atrament from 'src/atrament-context';\n\nconst AllChoices = ({ currentScene, readyHandler, isReady }) => {\n  const atrament = useContext(Atrament);\n\n  const makeChoice = useCallback((id) => {\n    readyHandler(false);\n    setTimeout(() => {\n      atrament.game.makeChoice(id);\n      atrament.game.continueStory();  \n    }, 200);\n  }, [ atrament.game, readyHandler ]);\n\n  if (!currentScene) {\n    return '';\n  }\n\n  return (\n    <>\n      { currentScene.choices.length === 0 ? <LinkHome /> : <Choices isReady={isReady} currentScene={currentScene} handleClick={makeChoice} /> }\n    </>\n  );\n};\n\nconst BlockScenes = ({ scenes }) => {\n  const [ isReady, setReady ] = useState(false);\n  const lastSceneIndex = scenes.length - 1;\n  return (\n    <>\n      <div class={[style.block_scene, 'atrament-block-scene'].join(' ')}>\n        {\n          scenes.map((s, i) => <Scene key={s.uuid} scene={s} isCurrent={i === lastSceneIndex} readyHandler={setReady} />)\n        }\n      </div>\n      <AllChoices currentScene={scenes[lastSceneIndex]} isReady={isReady} readyHandler={setReady} />\n    </>\n  );\n};\n\nexport default BlockScenes;\n"],"sourceRoot":""}